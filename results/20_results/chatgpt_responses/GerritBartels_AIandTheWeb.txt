REQUEST
Your task is to extract the topic/category of a Rasa chatbot. Given:
                - the repository name: AIandTheWeb
                - the description: Repository for the university course AI and the Web
                - the README: # Flask Movie Recommender

This project is a distributed messageboard built with flask. It is designed to function with the other channels from all participants of the university course. Our channels consist of a simple "just chatting" channel and a chatbot channel. The chatbot is built with rasa and can do all sorts of tasks from simple chatting to rolling a die or telling the weather for a specific location.


## Showcase

![MessageBoard](https://github.com/GerritBartels/AIandTheWeb/assets/64156238/1ba6b877-e3dc-4740-b94e-c4f82c876e24)


## Features

- A modern, dark-themed chat UI
- A just chatting channel
- A chatbot channel with a rasa-based chatbot. Abilities include:
    - Simple chatting
    - Rolling a die
    - Flipping a coin
    - Telling the current time and date
    - Telling a joke, quote, or fact
    - Recommending a recipe to cook
    - Telling the weather for a specific location
- A hub to manage all channels
- A client to connect to the hub and chat with the channels
- A database to store the chat history depending on the selected user
- Ability to add new users


## Usage

1. Clone the repository. 
2. Change directory: `cd DistributedMessageboard`
3. Set up two virtual environments and install the required dependencies, respectively:
    3.1 Install the required dependencies for the flask apps: `pip install -r requirements.txt`
    3.2 Install the required dependencies for rasa: `pip install -r requirements_rasa.txt`
4. Activate the flask virtual environment.
5. Instantiate the chat database: `flask --app client.py initdb`
6. Start the hub in a dedicated terminal: `python hub.py`
7. Start the just chatting channel in a dedicated terminal: `python just_chatting.py`
8. Register the just chatting channel with the hub: `flask --app user_channel.py register`
9. Start the chatbot channel in a dedicated terminal: `python chatbot.py`
10. Register the chatbot channel with the hub: `flask --app rasa_channel.py register`
11. Start the client in a dedicated terminal: `python client.py`
12. Navigate to the rasa directory: `cd rasa`
13. Activate the rasa virtual environment.
14. Start the rasa server in a dedicated terminal: `rasa run --enable-api --cors "*" --port 5054`
15. Start the rasa action server in a dedicated terminal: `rasa run actions`
16. Open the client in your browser and start chatting.

# Flask Movie Recommender

This project is a movie recommender system developed using Flask, Flask-User, Flask-Sqlalchemy, TensorFlow, and the MovieLens 100k dataset. It seamlessly combines intuitive user interaction, robust database management, and neural network-based recommendations.

## Showcase

![Movie_Recommender_Demo](https://github.com/GerritBartels/AIandTheWeb/assets/64156238/3e6353cd-8d73-426d-ab9b-3bf0902835ef)


## Features

- **Web Interface**: The movie recommender provides a sleek, visually appealing web interface built with Flask. Users can register or log in to browse a list of stored films, give them their personal ratings, query the database for their favorite movies, or get custom recommendations on what to watch next from a neural recommendation model created with TensorFlow. Navigation is facilitated by a burger menu and a navigation bar.
- **User Management**:  Flask-User handles the registration, login, and logout processes. Certain routes are protected and accessible only to logged-in users, ensuring a secure and personalized experience.
- **Relational databases**: All data is stored in SQLite databases for efficient access, including adding new data and updating data.
- **Homepage**: The homepage welcomes all visitors with a carousel overview of top movies, a varying selection of films to discover, and links to the other features.
- **Movies**: Logged-in users can browse through a list of all stored films and view additional information such as the average star rating, the film poster, the plot description, and links to IMDb and TMDB. In addition, users have the option of rating each film using a star system or adjusting their previous rating.
- **Search**: Logged-in users can query the movie database, with the results being fuzzily matched based on the Levenshtein Distance to overcome spelling mistakes. Internally, flask-sqlalchemy is used to make queries in a simple, object-oriented way without using SQL directly.
- **Neural Recommender**: A neural recommendation model created with TensorFlow provides logged-in users with movie suggestions. Both movies and users are represented by learned embeddings that guide the neural network for providing personalized recommendations. The cold start problem is addressed by assigning new users the average embedding calculated across all users.
- **Scheduled Training**: The neural recommendation model is kept up-to-date by being regularly retrained as soon as a certain number of new user interactions have been recorded. This ensures the system continuously adapts to evolving user preferences.


## Usage

1. Clone the repository. 
2. Change directory: `cd MovieRecommender`
3. Install the required dependencies: `pip install -r requirements.txt`
4. Instantiate the database: `flask --app recommender.py initdb`
   4.1 To entirely rebuild an existing database add the `--rebuild` flag
5. Train the recommender: `flask --app recommender.py train`
6. Run the Flask app: `python recommender.py`

Optionally the larger variants of the [MovieLens](https://grouplens.org/datasets/movielens/) dataset may be used if desired. 
# AIandTheWeb

This is the repository for the university course AI and the Web. It contains the code for three individual projects: A Search Engine, a Movie Recommender, and a Distributed Messageboard. Both the front- and backend code, as well as a detailed README can be found in the respective folders. 


## Search Engine

![SearchEngineShowcase](https://github.com/GerritBartels/AIandTheWeb/assets/64156238/952c1e69-4d9a-4234-993f-16e557dafd26)

## Movie Recommender

![Movie_Recommender_Demo](https://github.com/GerritBartels/AIandTheWeb/assets/64156238/3e6353cd-8d73-426d-ab9b-3bf0902835ef)

## Distributed Messageboard

![MessageBoard](https://github.com/GerritBartels/AIandTheWeb/assets/64156238/1ba6b877-e3dc-4740-b94e-c4f82c876e24)
# Flask Search Engine

This project is a simple search engine built with Flask, Whoosh or a custom index, and a custom web crawler.

## Showcase

![SearchEngineShowcase](https://github.com/GerritBartels/AIandTheWeb/assets/64156238/952c1e69-4d9a-4234-993f-16e557dafd26)

## Features

- **Web Crawling**: The search engine uses a custom-built web crawler to fetch and index web pages. The crawler can be run in parallel using multiple threads for increased performance.
- **Search**: The search engine uses Whoosh, a fast, featureful full-text indexing and searching library or our custom implementation, to index and search the crawled web pages.
- **Web Interface**: The search engine provides a simple yet visually appealing web interface built with Flask. Users can enter their search queries and get the search results displayed in a user-friendly format.

## Usage

1. Clone the repository.
2. Install the required dependencies: `pip install -r requirements.txt`
3. Run the Flask app: `python flask_search_engine.py`

## Configuration

You can configure the search engine by modifying the following variables in `flask_search_engine.py`:

- `START_URL`: The URL where the web crawler starts crawling.
- `INDEX_DIR_NAME`: The directory where the index is stored.
- `LOAD_INDEX_FROM_FILE`: Whether to load the index from file. If set to `False`, the web crawler will start crawling and build the index.
- `NUM_THREADS`: The number of threads used by the web crawler.
- `DEBUG`: Whether to run the Flask app in debug mode.

                - the list of intents: ['greet', 'goodbye', 'affirm', 'deny', 'mood_great', 'mood_unhappy', 'bot_challenge', 'ask_joke', 'thank', 'help', 'about', 'age', 'place', 'technology', 'ask_weather', 'ask_coin_flip', 'ask_time', 'ask_dice_roll', 'ask_quote', 'ask_fact', 'ask_recipe']
                - the list of entities: ['city']
                - the list of actions: ['action_weather', 'action_reset_all_slots', 'action_coin_flip', 'action_time', 'action_dice_roll', 'action_joke', 'action_quote', 'action_fact', 'action_recipe']
                Select the topic of the chatbot considering this list of topics: ['Art & Design', 'Auto & Vehicles', 'Android Wear', 'Beauty', 'Books & Reference', 'Business', 'Comics', 'Communication', 'Dating', 'Education', 'Entertainment', 'Events', 'Finance', 'Food & Drink', 'Health & Fitness', 'House & Home', 'Libraries & Demo', 'Lifestyle', 'Maps & Navigation', 'Medical', 'Music & Audio', 'News & Magazines', 'Parenting', 'Personalization', 'Photography', 'Productivity', 'Shopping', 'Social', 'Sports', 'Tools', 'Travel & Local', 'Video Players & Editors', 'Watch Face', 'Weather', 'Games']. If the chatbot's topic matches one of these, use the topic in the list. Otherwise define a new topic. 
                Answer only with the topic, with no further words.

RESPONSE
Communication