REQUEST
Your task is to extract the topic/category of a Rasa chatbot. Given:
                - the repository name: NLI-EVA0
                - the description: EVA 2.0: Conversational agent EVA is the virtual secretary of the Department of Information and Communications Technologies of the Universitat Pompeu Fabra. This code is our submission to the 2nd prototype of EVA. Our version is multimodal and includes an interactive 3D avatar.
                - the README: ![Eva greeting](https://github.com/fenjenahwe/NLI-EVA0/blob/V2/screenshot.png "Greeting EVA")

# Demo-Video

https://www.youtube.com/watch?v=U4JLH5BoXQQ


# NLI-EVA

Before you get started, you need to get some servers running:

### Rasa actions

Run this command in the folder:

`rasa run actions`

### Rasa chatbot

A pretrained model is provided. You can always retrain according to edits by running:

`rasa train`

Run this command to get the Rasa server running:

`rasa run -m models --enable-api -p 5055 --cors "*" --credentials credentials.yml`

### Python server (interface-rasa)

Install the libraries needed in the pyserver.py* file, install uvicorn and run this command (macos) to get the python server running:

`uvicorn pyserver:app --reload`

### Interface

(commands for macos)

`install sudo npm install -g http-server`

Run a local server: 

`http-server`

visit http://localhost:port/ to access the interface and finally interact with EVA!


### avatar

The 3D avatar used was downloaded and rigged from https://www.mixamo.com/#/?page=1&type=Character

Javi Agenjo's libraries (LiteGL and Rendeer) were used for the 3D canvas.  

### Weather API

To access the weather API, provide your API key in the ActionGetCurrWeather.py file.
                - the list of intents: ['greet', 'goodbye', 'affirm', 'deny', 'thank', 'mood_great', 'mood_unhappy', 'bot_challenge', 'confirm_exists', 'find_group_number', 'get_all_groups', 'get_number_of_groups', 'get_curr_weather', 'get_cafeteria_information', 'find_group_info', 'find_group_head', 'find_programs_info', 'find_ug_info', 'find_grad_info', 'list_bsc', 'list_msc', 'find_credit_info', 'find_duration_info', 'find_degree_info', 'get_library_information', 'get_current_location', 'get_dept_director', 'get_map', 'general_info', 'reception_info']
                - the list of entities: ['msc_name', 'group_name', 'current_staff_name', 'teacher_name', 'bsc_name', 'slot_group', 'PERSON']
                - the list of actions: ['action_check_existence', 'action_lab_info', 'action_get_curr_weather', 'action_degree_info']
                Select the topic of the chatbot considering this list of topics: ['Art & Design', 'Auto & Vehicles', 'Android Wear', 'Beauty', 'Books & Reference', 'Business', 'Comics', 'Communication', 'Dating', 'Education', 'Entertainment', 'Events', 'Finance', 'Food & Drink', 'Health & Fitness', 'House & Home', 'Libraries & Demo', 'Lifestyle', 'Maps & Navigation', 'Medical', 'Music & Audio', 'News & Magazines', 'Parenting', 'Personalization', 'Photography', 'Productivity', 'Shopping', 'Social', 'Sports', 'Tools', 'Travel & Local', 'Video Players & Editors', 'Watch Face', 'Weather', 'Games']. If the chatbot's topic matches one of these, use the topic in the list. Otherwise define a new topic. 
                Answer only with the topic, with no further words.

RESPONSE
Education