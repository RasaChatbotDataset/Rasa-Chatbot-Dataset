REQUEST
Problem: This is a python actions.py file of Rasa chatbot from typing import Any, Text, Dict, List

from rasa_sdk import Action, Tracker, utils
from rasa_sdk.knowledge_base.actions import ActionQueryKnowledgeBase
from rasa_sdk.executor import CollectingDispatcher
import os

from rasa_sdk.knowledge_base.storage import InMemoryKnowledgeBase

USE_NEO4J = bool(os.getenv("USE_NEO4J", False))

if USE_NEO4J:
    from neo4j_knowledge_base import Neo4jKnowledgeBase


class MyKnowledgeBaseAction(ActionQueryKnowledgeBase):

    def name(self) -> Text:
        return "action_response_query"

    def __init__(self):
        if USE_NEO4J:
            print("using Neo4jKnowledgeBase")
            knowledge_base = Neo4jKnowledgeBase(
                "bolt://localhost:7687", "neo4j", "43215678"
            )
        else:
            print("using InMemoryKnowledgeBase")
            knowledge_base = InMemoryKnowledgeBase("data.json")

        super().__init__(knowledge_base)

    async def utter_objects(
        self,
        dispatcher: CollectingDispatcher,
        object_type: Text,
        objects: List[Dict[Text, Any]],
    ) -> None:
        """
        Utters a response to the user that lists all found objects.
        :param dispatcher: the dispatcher
        :param object_type: the object type
        :param objects: the list of objects
        :return: None
        """

        if objects:
            dispatcher.utter_message(text=f"Found the following {object_type}s:")

            repr_function = await utils.call_potential_coroutine(
                self.knowledge_base.get_representation_function_of_object(object_type)
            )

            for i, obj in enumerate(objects, 1):
                dispatcher.utter_message(text=f"{i}: {repr_function(obj)}")
        else:
            dispatcher.utter_message(text=f"I did not find any {object_type}s.")

    def utter_attribute_value(
        self,
        dispatcher: CollectingDispatcher,
        object_name: Text,
        attribute_name: Text,
        attribute_value: Text,
    ) -> None:
        """
        Utters a response that informs the user about the attribute value of the
        attribute of interest.
        :param dispatcher: the dispatcher
        :param object_name: the name of the object
        :param attribute_name: the name of the attribute
        :param attribute_value: the value of the attribute
        :return: None
        """

        if attribute_value:
            dispatcher.utter_message(text=f"The {attribute_name} of {object_name} is {attribute_value}.")
        else:
            dispatcher.utter_message(text=f"I didn't find the {attribute_name} of {object_name}.")
 
        Does the chatbot use any database (local or external) or any external service? Answer with a list of these databases and services (only names on a single line, no further explanation, no numeration). 
        
    For this problem I received these answers, each with a list of services:
    Neo4j, InMemoryKnowledgeBase,,###
Neo4jKnowledgeBase, InMemoryKnowledgeBase
Neo4j, InMemoryKnowledgeBase
Neo4j, InMemoryKnowledgeBase
Neo4jKnowledgeBase InMemoryKnowledgeBase
Neo4j, InMemoryKnowledgeBase
Neo4jKnowledgeBase, InMemoryKnowledgeBase
Neo4j, InMemoryKnowledgeBase
Neo4j, InMemoryKnowledgeBase
Neo4jKnowledgeBase, InMemoryKnowledgeBase
    Basing on these answers and on the action file written in the problem, write one complete and correct list of the external services used in this action file. Keep in mind that some answers may have incorrect terms which are not external services or databases (like libraries that are not external services, or services that do not exist) and you have to remove them. 
    Different answers may refer to the same service with different names, and there could be missing services that you have to add.
    Write this list of service names on a single line, with no introduction, further explanation or numeration, so like this:
    Service1, Service2, Service3 
    In a new section titled "Purpose of external services" explain the purpose of each service.
    If the file doesn't use any external service nor database, answer only with "NO" and nothing else

RESPONSE
Neo4j, InMemoryKnowledgeBase

Purpose of external services:
Neo4j: Neo4j is a graph database management system used to store and manage data in a graph format, allowing for efficient querying and manipulation of complex relationships between data points.
InMemoryKnowledgeBase: InMemoryKnowledgeBase is a local, in-memory storage solution used to store and manage data temporarily during the runtime of the application, allowing for quick access and manipulation without the need for persistent storage.