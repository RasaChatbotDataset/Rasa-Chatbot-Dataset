REQUEST
Problem: This is a python actions.py file of Rasa chatbot from typing import Any, Text, Dict, List, Tuple
from rasa_sdk import Action, Tracker
from rasa_sdk.executor import CollectingDispatcher
from datetime import datetime
import pytz
from app import app, UserLocation
from flask_login import current_user
from timezonefinder import TimezoneFinder

class ActionFetchTime(Action):
    def name(self) -> Text:
        return "get_date_time"

    def run(self, dispatcher: CollectingDispatcher, tracker: Tracker, domain: Dict[Text, Any]) -> List[Dict[Text, Any]]:
        user = current_user
        if user and hasattr(user, 'user_id'):
            latitude, longitude = self.get_user_location(user)
            if latitude is not None and longitude is not None:
                time = self.fetch_local_time(latitude, longitude)
                dispatcher.utter_message(f"The current time is: {time}")
            else:
                dispatcher.utter_message("User location not found.")
        else:
            dispatcher.utter_message("User not authenticated.")
        return []

    def get_user_location(self, user: Any) -> Tuple[float, float]:
        if user and hasattr(user, 'id'):
            user_location = UserLocation.query.filter_by(user=user.id).first()
            if user_location:
                return user_location.latitude, user_location.longitude
        return None, None

    def fetch_local_time(self, latitude: float, longitude: float) -> str:
        utc_time = datetime.now(pytz.utc)
        time_zone = self.get_time_zone(latitude, longitude)
        local_time = utc_time.astimezone(pytz.timezone(time_zone))
        formatted_time = local_time.strftime("%Y-%m-%d %H:%M:%S %Z")

        return formatted_time

    def get_time_zone(self, latitude: float, longitude: float) -> str:
        tf = TimezoneFinder()
        time_zone_str = tf.timezone_at(lat=latitude, lng=longitude)
        if time_zone_str:
            return time_zone_str
        else:
            return "UTC"
 
        Does the chatbot use any database (local or external) or any external service? Answer with a list of these databases and services (only names on a single line, no further explanation, no numeration). 
        
    For this problem I received these answers, each with a list of services:
    Databases and services: UserLocation, pytz, flask_login, TimezoneFinder
UserLocation, pytz, flask_login, TimezoneFinder
UserLocation, pytz, flask_login, TimezoneFinder
UserLocation, pytz, flask_login, TimezoneFinder
UserLocation, pytz, TimezoneFinder
UserLocation, pytz, flask_login, TimezoneFinder
UserLocation, pytz, flask_login, TimezoneFinder
Databases and services: UserLocation, pytz, flask_login, TimezoneFinder
Databases and services: UserLocation, pytz, flask_login, TimezoneFinder
Databases and services: UserLocation, pytz, flask_login, TimezoneFinder
    Basing on these answers and on the action file written in the problem, write one complete and correct list of the external services used in this action file. Keep in mind that some answers may have incorrect terms which are not external services or databases (like libraries that are not external services, or services that do not exist) and you have to remove them. 
    Different answers may refer to the same service with different names, and there could be missing services that you have to add.
    Write this list of service names on a single line, with no introduction, further explanation or numeration, so like this:
    Service1, Service2, Service3 
    In a new section titled "Purpose of external services" explain the purpose of each service.
    If the file doesn't use any external service nor database, answer only with "NO" and nothing else

RESPONSE
UserLocation, pytz, flask_login, TimezoneFinder

Purpose of external services:
- UserLocation: A database model to store and retrieve user location data.
- pytz: A library to handle timezone conversions and provide accurate timezone information.
- flask_login: A library to manage user authentication and session management in a Flask application.
- TimezoneFinder: A library to determine the timezone of a given geographical location based on latitude and longitude.