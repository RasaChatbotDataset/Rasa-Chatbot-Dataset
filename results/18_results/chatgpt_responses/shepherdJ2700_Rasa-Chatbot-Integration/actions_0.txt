REQUEST
Problem: This is a python actions.py file of Rasa chatbot from rasa_sdk import Action
from rasa_sdk.events import SlotSet

class ActionAskForPart(Action):
    def name(self) -> str:
        return "action_ask_for_part"  # Custom action name

    def run(self, dispatcher, tracker, domain):
        dispatcher.utter_message(text="What parts are you checking compatibility for?")
        return []

class ActionGoodbye(Action):
    def name(self) -> str:
        return "action_goodbye"  # Custom action name

    def run(self, dispatcher, tracker, domain):
        dispatcher.utter_message(text="Goodbye! Have a great day!")
        return []

class ActionIAmABot(Action):
    def name(self) -> str:
        return "action_iamabot"  # Custom action name

    def run(self, dispatcher, tracker, domain):
        dispatcher.utter_message(text="I am a bot, created to help you with product compatibility.")
        return []



class ActionCheckCompatibility(Action):

    def name(self) -> Text:
        return "action_check_compatibility"

    def run(
        self, dispatcher: CollectingDispatcher, tracker: Tracker, domain: Dict[Text, Any]
    ) -> List[Dict[Text, Any]]:
        # load the csv file
        compatibility_data = pd.read_csv("hardware_compatibility.csv")

        # get the user message
        user_message = tracker.latest_message.get("text").strip().lower()

        # search for the users  product in the csv
        matching_product = compatibility_data[compatibility_data['Product_Name'].str.lower() == user_message]

        if not matching_product.empty:
            product_type = matching_product.iloc[0]['Product_Type']
            product_name = matching_product.iloc[0]['Product_Name']
            features = matching_product.iloc[0]['Features']
            compatible_with = matching_product.iloc[0]['Compatible_With']
            response = (
                f"The {product_type} '{product_name}' has the following features: {features}.\n"
                f"It is compatible with: {compatible_with}."
            )
        else:
            response = "I'm sorry, I couldn't find compatibility information for that product. Please try again."

        dispatcher.utter_message(text=response)
        return []
 
        Does the chatbot use any database (local or external) or any external service? Answer with a list of these databases and services (only names on a single line, no further explanation, no numeration). 
        
    For this problem I received these answers, each with a list of services:
    hardware_compatibility.csv
hardware_compatibility.csv
hardware_compatibility.csv
hardware_compatibility.csv
hardware_compatibility.csv
hardware_compatibility.csv
hardware_compatibility.csv
hardware_compatibility.csv
hardware_compatibility.csv
hardware_compatibility.csv
    Basing on these answers and on the action file written in the problem, write one complete and correct list of the external services used in this action file. Keep in mind that some answers may have incorrect terms which are not external services or databases (like libraries that are not external services, or services that do not exist) and you have to remove them. 
    Different answers may refer to the same service with different names, and there could be missing services that you have to add.
    Write this list of service names on a single line, with no introduction, further explanation or numeration, so like this:
    Service1, Service2, Service3 
    In a new section titled "Purpose of external services" explain the purpose of each service.
    If the file doesn't use any external service nor database, answer only with "NO" and nothing else

RESPONSE
hardware_compatibility.csv

Purpose of external services:
hardware_compatibility.csv: This is a local CSV file used to store and retrieve hardware compatibility information. The chatbot reads this file to check if a user's product is compatible with other hardware.