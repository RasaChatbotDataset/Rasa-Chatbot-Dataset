REQUEST
Problem: This is a python actions.py file of Rasa chatbot from rasa_sdk.executor import CollectingDispatcher
from typing import Any, Text, Dict, List
from rasa_sdk import Action, Tracker
from dotenv import load_dotenv
from logging import getLogger
from enum import IntEnum
import os

logger = getLogger(__name__)

env = os.getenv("ENV", "local")
env_file = f".env-{env}"
load_dotenv(dotenv_path=f"../../.env-{env}")


MODEL_NAME = os.getenv("MODEL_NAME")
CHANNEL_TYPE = IntEnum(
    "CHANNEL_TYPE", ["SMS", "TELEGRAM", "WHATSAPP", "EMAIL", "WEBSITE"]
)

logger = getLogger(__name__)

# -------------------------------------------------
# Custom Rasa action to trigger our RasaGPT LLM API
# -------------------------------------------------
class ActionGPTFallback(Action):
    def name(self) -> str:
        return "action_gpt_fallback"

    def get_channel(self, channel: str) -> CHANNEL_TYPE:
        if channel == "telegram":
            return CHANNEL_TYPE.TELEGRAM
        elif channel == "whatsapp":
            return CHANNEL_TYPE.WHATSAPP
        elif channel == "sms":
            return CHANNEL_TYPE.SMS
        elif channel == "email":
            return CHANNEL_TYPE.EMAIL
        else:
            return CHANNEL_TYPE.WEBSITE

    def run(
        self,
        dispatcher: CollectingDispatcher,
        tracker: Tracker,
        domain: Dict[Text, Any],
    ) -> List[Dict[Text, Any]]:
        # ------------
        # Get metadata
        # ------------
        data = tracker.latest_message
        metadata = data['metadata'] if data and 'metadata' in data else None
        response = metadata['response'] if metadata and 'response' in metadata else None
        tags = metadata['tags'] if metadata and 'tags' in metadata else None
        is_escalate = (
            metadata['is_escalate'] if metadata and 'is_escalate' in metadata else None
        )

        # -----------------
        # Escalate to human
        # -----------------
        if is_escalate is True:
            response = f'{response} \n\n ‚ö†Ô∏èüíÅ [ESCALATE TO HUMAN]'
    
        # -----------------------
        # Labels generated by LLM
        # -----------------------
        if tags is not None:
            response = f'{response} \n\n üè∑Ô∏è  {",".join(tags)}'

        logger.debug(
            f"""[ü§ñ ActionGPTFallback]
        data: {data}
        metadata: {metadata}
        response: {response}
        tags: {tags}
        is_escalate: {is_escalate}
        """
        )
        dispatcher.utter_message(text=response)
        return []
 
        Does the chatbot use any database (local or external) or any external service? Answer with a list of these databases and services (only names on a single line, no further explanation, no numeration). 
        
    For this problem I received these answers, each with a list of services:
    Databases and services: dotenv, RasaGPT LLM API
dotenv, RasaGPT LLM API
dotenv
dotenv
dotenv
dotenv, RasaGPT LLM API
dotenv, os
Databases and services: dotenv, RasaGPT LLM API
Databases and services: dotenv, RasaGPT LLM API
dotenv, RasaGPT LLM API
    Basing on these answers and on the action file written in the problem, write one complete and correct list of the external services used in this action file. Keep in mind that some answers may have incorrect terms which are not external services or databases (like libraries that are not external services, or services that do not exist) and you have to remove them. 
    Different answers may refer to the same service with different names, and there could be missing services that you have to add.
    Write this list of service names on a single line, with no introduction, further explanation or numeration, so like this:
    Service1, Service2, Service3 
    In a new section titled "Purpose of external services" explain the purpose of each service.
    If the file doesn't use any external service nor database, answer only with "NO" and nothing else

RESPONSE
RasaGPT LLM API

Purpose of external services:
RasaGPT LLM API: This service is used to trigger the RasaGPT language model API to generate responses based on the user's input and metadata.