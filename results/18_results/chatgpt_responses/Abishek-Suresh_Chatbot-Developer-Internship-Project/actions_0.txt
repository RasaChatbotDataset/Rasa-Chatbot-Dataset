REQUEST
Problem: This is a python actions.py file of Rasa chatbot # This files contains your custom actions which can be used to run
# custom Python code.
#
# See this guide on how to implement these action:
# https://rasa.com/docs/rasa/custom-actions


# This is a simple example for a custom action which utters "Hello World!"
import mysql.connector
from typing import Any, Text, Dict, List
import re
from rasa_sdk import Action, Tracker, FormValidationAction
from rasa_sdk.executor import CollectingDispatcher
from rasa_sdk.types import DomainDict
#
#
# class ActionHelloWorld(Action):

#     def name(self) -> Text:
#         return "action_hello_world"

#     def run(self, dispatcher: CollectingDispatcher,
#             tracker: Tracker,
#             domain: Dict[Text, Any]) -> List[Dict[Text, Any]]:

#         dispatcher.utter_message(text="Hello World!")

#         return []

def DataUpdate(name,email,phone_number,adults,children,room_type,room_num,check_in,check_out):
    mydb = mysql.connector.connect(
        host = "34.125.101.159",
        user = "root",
        passwrd = "2212",
        database = "Hotel_chatbot" 
    )

    mycursor = mydb.cursor()
    
    sql = 'INSERT INTO Booking_details (Name, Email, PhoneNumber, Adults_Staying, Children_Staying, RoomType, No_of_rooms_required, CheckIn_date, CheckOut_date) VALUES ("{0}","{1}","{2}","{3}","{4}","{5}","{6}","{7}","{8}");'.format(name,email,phone_number,adults,children,room_type,room_num,check_in,check_out)
    mycursor.execute(sql)

    mydb.commit()

    print(mycursor.rowcount, "Record inserted successfully")


class ValidateBookRoomForm(FormValidationAction):
    def name(self) -> Text:
         return "validate_book_room_form"

    def validate_name(
        self,
        slot_value: Any,
        dispatcher: CollectingDispatcher,
        tracker: Tracker,
        domain: DomainDict,
    ) -> Dict[Text, Any]:
        """Validate `name` value."""

        # Validating the name, what if it's short
        if len(slot_value) <=2:
            dispatcher.utter_message(text = f"That's a very short name. I'm assuming you mis-spelled.")
            return{"name": None}
        else:
            return{"name": slot_value}

       
    def validate_phone_number(
        self,
        slot_value:Any,
        dispatcher: CollectingDispatcher,
        tracker:Tracker,
        domain: DomainDict,
    ) -> Dict[Text, Any]:
        """Validate `phone_number` value."""
     # Validating the email
        if len(slot_value)==10:
            return{"phone_number": slot_value}
        else:
            dispatcher.utter_message(text = f"Your number is too short or too long.")
            return{"phone_number": None}

    def validate_email(
        self,
        slot_value:Any,
        dispatcher: CollectingDispatcher,
        tracker:Tracker,
        domain: DomainDict,
    ) -> Dict[Text, Any]:
        """Validate `email` value."""
     # Validating the email
        if ('@' not in slot_value) and (len(slot_value)<5) :
            dispatcher.utter_message(text = f"Your email ID isn't valid.")
            return{"email": None}
        else:
            return{"email": slot_value}

    def validate_check_in(
        self,
        slot_value:Any,
        dispatcher: CollectingDispatcher,
        tracker:Tracker,
        domain: DomainDict,
    ) -> Dict[Text, Any]:
        """Validate `check_in` value."""
     # Validating the check_in date
        if (re.search(r"\d{2}/\d{2}/\d{4}", slot_value)):
            return{"check_in": slot_value}
        else:
            dispatcher.utter_message(text = f"The entered date isn't valid one")
            return{"check_in": None}

    def validate_check_out(
        self,
        slot_value:Any,
        dispatcher: CollectingDispatcher,
        tracker:Tracker,
        domain: DomainDict,
    ) -> Dict[Text, Any]:
        """Validate `check_out` value."""
     # Validating the check_out date
        if (re.search(r"\d{2}/\d{2}/\d{4}", slot_value)):
            return{"check_out": slot_value}
        else:
            dispatcher.utter_message(text = f"The entered date isn't valid one")
            return{"check_out": None}
            
    
    
    
class ActionSubmit(Action):

    def name(self) -> Text:
        return "action_submit"

    def run(self, dispatcher: CollectingDispatcher,
            tracker: Tracker,
            domain: Dict[Text, Any]) -> List[Dict[Text, Any]]:
        
        name = tracker.get_slot("name")
        email = tracker.get_slot("email")
        phone_number = tracker.get_slot("phone_number")
        adults = tracker.get_slot("adults")
        children = tracker.get_slot("children")
        room_type = tracker.get_slot("room_type")
        room_num = tracker.get_slot("room_num")
        check_in = tracker.get_slot("check_in")
        check_out = tracker.get_slot("check_out")

        dispatcher.utter_message(text= f"Full name of the registrant: {name}\n Email address: {email}\n Phone number: {phone_number}\n Number of adults staying: {adults}\n Number of children staying: {children}\n Room type: {room_type}\n Number of rooms: {room_num}\n Check-in date: {check_in}\n Check-out date: {check_out}\n Hotel front desk staff will contact the customer to exchange booking details. \n Thank you for trusting our hotel!")
        DataUpdate(name,email,phone_number,adults,children,room_type,room_num,check_in,check_out)
        return []




            
     
        Does the chatbot use any database (local or external) or any external service? Answer with a list of these databases and services (only names on a single line, no further explanation, no numeration). 
        
    For this problem I received these answers, each with a list of services:
    MySQL
mysql.connector
MySQL
mysql.connector
mysql.connector
MySQL
MySQL
mysql.connector
mysql.connector
MySQL
    Basing on these answers and on the action file written in the problem, write one complete and correct list of the external services used in this action file. Keep in mind that some answers may have incorrect terms which are not external services or databases (like libraries that are not external services, or services that do not exist) and you have to remove them. 
    Different answers may refer to the same service with different names, and there could be missing services that you have to add.
    Write this list of service names on a single line, with no introduction, further explanation or numeration, so like this:
    Service1, Service2, Service3 
    In a new section titled "Purpose of external services" explain the purpose of each service.
    If the file doesn't use any external service nor database, answer only with "NO" and nothing else

RESPONSE
MySQL

Purpose of external services:
MySQL: MySQL is used as the database to store booking details such as name, email, phone number, number of adults and children staying, room type, number of rooms, check-in date, and check-out date.