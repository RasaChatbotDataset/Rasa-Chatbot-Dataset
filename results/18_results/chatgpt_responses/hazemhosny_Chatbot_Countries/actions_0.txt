REQUEST
Problem: This is a python actions.py file of Rasa chatbot from typing import Any, Text, Dict, List

from rasa_sdk import Action, Tracker, FormValidationAction
from rasa_sdk.executor import CollectingDispatcher

from rasa_sdk.types import DomainDict
from rasa_sdk.events import SlotSet

import requests

# get country database through GET method API
response = requests.get('https://qcooc59re3.execute-api.us-east-1.amazonaws.com/dev/getCountries')
# check for errors in connection
if response.status_code != 200:
    raise RuntimeError("Something bad happened, Please check the server.")
country_db_json = response.json()
country_db = country_db_json['body']

def get_capital(country_name):
    """ get capital given the country name through POST method API """
    url = 'https://qcooc59re3.execute-api.us-east-1.amazonaws.com/dev/getCapital'
    data_ = {"country": country_name}
    r = requests.post(url=url, json=data_)
    # check for errors in connection
    if response.status_code != 200:
        raise RuntimeError("Something bad happened, Please check the server.")
    data = r.json()
    success = data['success']
    body = data['body']
    return success, body

def get_population(country_name):
    """ get population given the country name through POST method API """
    url = 'https://qcooc59re3.execute-api.us-east-1.amazonaws.com/dev/getPopulation'
    data_ = {"country": country_name}
    r = requests.post(url=url, json=data_)
    # check for errors in connection
    if response.status_code != 200:
        raise RuntimeError("Something bad happened, Please check the server.")
    data = r.json()
    success = data['success']
    body = data['body']
    return success, body

class ValidateCountryForm(FormValidationAction):
    def name(self) -> Text:
        return "validate_country_form"
    
    def validate_country(self, slot_value: Text, dispatcher: CollectingDispatcher,
                         tracker: Tracker, domain: DomainDict,) -> Dict[Text, Any]:
        """ Validate country name value """
        
        # preprocess all words except USA to handle unexpected text
        if slot_value != 'USA':
            slot_value = slot_value.capitalize()
        # validate slot to be in the country databsae    
        if slot_value not in country_db:
            msg = f"please enter a valid country, here is a list of valid countries\n{country_db}"
            dispatcher.utter_message(text=msg)
            return {"country": None}
        # confirm country is available, and add to slot 
        dispatcher.utter_message(text=f"OK! You want to know about {slot_value}.")
        return {"country": slot_value}

class ActionDisplayCountries(Action):

    def name(self) -> Text:
        return "action_display_countries"

    def run(self, dispatcher: CollectingDispatcher, tracker: Tracker,
            domain: Dict[Text, Any]) -> List[Dict[Text, Any]]:
        """ Display all valid countries """
        msg = f"here is a list of valid countries\n{country_db}"
        dispatcher.utter_message(text=msg)
        return [SlotSet("country", None)]

class ActionInformCapital(Action):

    def name(self) -> Text:
        return "action_inform_capital_pop"

    def run(self, dispatcher: CollectingDispatcher, tracker: Tracker,
            domain: Dict[Text, Any]) -> List[Dict[Text, Any]]:
        
        current_country = tracker.get_slot("country")
        # check that slot is not None
        if not current_country:
            msg = f"I didn't get it. Here is a list of valid countries.\n{country_db}"
            dispatcher.utter_message(text=msg)
            return []
        # preprocess all words except USA to handle unexpected text
        if current_country != 'USA':
            current_country = current_country.capitalize()
        # get latest intent to perform different functions
        current_intent = tracker.latest_message['intent'].get('name')

        if current_intent == 'request_capital':
            success, body = get_capital(current_country)
            # check if the slot 'country' within the valid countries
            if not success:
                msg = f"{body} Make sure you spelled it correctly.\n{country_db}"
                dispatcher.utter_message(text=msg)
                return []
            # get and utter the capital of country
            capital = body['capital']
            msg = f"{capital} is the capital of {current_country}."
            dispatcher.utter_message(text=msg)
            return []
        
        elif current_intent == 'request_population':
            success, body = get_population(current_country)
            # check if the slot 'country' within the valid countries
            if not success:
                msg = f"{body} Make sure you spelled it correctly.\n{country_db}"
                dispatcher.utter_message(text=msg)
                return []
            # get and utter the population of country
            population = body['population']
            msg = f"There is {population} in {current_country}."
            dispatcher.utter_message(text=msg)
            return []

        elif current_intent == 'inform_country_only':
            """ In case given country only, utter both capital and population """
            success, body_cap = get_capital(current_country)
            # check if the slot 'country' within the valid countries
            if not success:
                msg = f"{body_cap} Make sure you spelled it correctly.\n{country_db}."
                dispatcher.utter_message(text=msg)
                return []
        
            capital = body_cap['capital']   # get the capital of country
            _, body_pop = get_population(current_country)   # get the population of country
            population = body_pop['population']
            # utter the capital and population of country
            msg = f"{capital} is the capital of {current_country} with a population of {population}."
            dispatcher.utter_message(text=msg)
            return []
             
        Does the chatbot use any database (local or external) or any external service? Answer with a list of these databases and services (only names on a single line, no further explanation, no numeration). 
        
    For this problem I received these answers, each with a list of services:
    Country Database, getCapital API, getPopulation API,,###
https://qcooc59re3.execute-api.us-east-1.amazonaws.com/dev/getCountries, https://qcooc59re3.execute-api.us-east-1.amazonaws.com/dev/getCapital, https://qcooc59re3.execute-api.us-east-1.amazonaws.com/dev/getPopulation,,###
https://qcooc59re3.execute-api.us-east-1.amazonaws.com/dev/getCountries https://qcooc59re3.execute-api.us-east-1.amazonaws.com/dev/getCapital https://qcooc59re3.execute-api.us-east-1.amazonaws.com/dev/getPopulation
getCountries, getCapital, getPopulation,,###
Databases and services: qcooc59re3.execute-api.us-east-1.amazonaws.com
getCountries, getCapital, getPopulation,,###
getCountries, getCapital, getPopulation,,###
https://qcooc59re3.execute-api.us-east-1.amazonaws.com/dev/getCountries https://qcooc59re3.execute-api.us-east-1.amazonaws.com/dev/getCapital https://qcooc59re3.execute-api.us-east-1.amazonaws.com/dev/getPopulation,,###
Databases and services: qcooc59re3.execute-api.us-east-1.amazonaws.com/dev/getCountries, qcooc59re3.execute-api.us-east-1.amazonaws.com/dev/getCapital, qcooc59re3.execute-api.us-east-1.amazonaws.com/dev/getPopulation
Databases and services: qcooc59re3.execute-api.us-east-1.amazonaws.com
    Basing on these answers and on the action file written in the problem, write one complete and correct list of the external services used in this action file. Keep in mind that some answers may have incorrect terms which are not external services or databases (like libraries that are not external services, or services that do not exist) and you have to remove them. 
    Different answers may refer to the same service with different names, and there could be missing services that you have to add.
    Write this list of service names on a single line, with no introduction, further explanation or numeration, so like this:
    Service1, Service2, Service3 
    In a new section titled "Purpose of external services" explain the purpose of each service.
    If the file doesn't use any external service nor database, answer only with "NO" and nothing else

RESPONSE
https://qcooc59re3.execute-api.us-east-1.amazonaws.com/dev/getCountries, https://qcooc59re3.execute-api.us-east-1.amazonaws.com/dev/getCapital, https://qcooc59re3.execute-api.us-east-1.amazonaws.com/dev/getPopulation

Purpose of external services:
- https://qcooc59re3.execute-api.us-east-1.amazonaws.com/dev/getCountries: This service is used to retrieve the list of valid countries.
- https://qcooc59re3.execute-api.us-east-1.amazonaws.com/dev/getCapital: This service is used to get the capital of a given country.
- https://qcooc59re3.execute-api.us-east-1.amazonaws.com/dev/getPopulation: This service is used to get the population of a given country.