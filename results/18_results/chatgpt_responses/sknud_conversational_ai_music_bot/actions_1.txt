REQUEST
Problem: This is a python actions.py file of Rasa chatbot import spotipy
from spotipy.oauth2 import SpotifyClientCredentials
from dotenv import load_dotenv
import os
import requests


# Spotify API set up
client_id = os.getenv("SPOTIPY_CLIENT_ID")
client_secret = os.getenv("SPOTIPY_CLIENT_SECRET")
client_credentials_manager = SpotifyClientCredentials(client_id=client_id, client_secret=client_secret)
sp = spotipy.Spotify(client_credentials_manager=client_credentials_manager)
# Last FM API Set up
last_fm_api_key = os.getenv("LAST_FM_API_KEY")

def get_album_release_date(album_name):
    try:
        # Search for the album
        results = sp.search(q=album_name, type='album', limit=1)
        if not results['albums']['items']:
            return None  # No results for the album name

        album_id = results['albums']['items'][0]['id']
        album_details = sp.album(album_id)

        # Extract the release date
        release_date = album_details['release_date']
        return release_date
    except spotipy.SpotifyException as e:
        print(f"Spotify API error: {e}")
        return None
    
def get_artist_biography(artist_name):
    url = "http://ws.audioscrobbler.com/2.0/"
    params = {
        "method": "artist.getinfo",
        "artist": artist_name,
        "api_key": last_fm_api_key,
        "format": "json"
    }

    response = requests.get(url, params=params)
    if response.status_code != 200:
        return None

    data = response.json()
    if 'artist' in data and 'bio' in data['artist'] and 'content' in data['artist']['bio']:
        return data['artist']['bio']['content']

    return None

def get_album_tracklist(album_title, artist_name=None):
    # Search query
    query = album_title
    if artist_name:
        query += f" artist:{artist_name}"

    # Search for the album on Spotify
    results = sp.search(query, type='album', limit=1)
    albums = results['albums']['items']

    if not albums:
        return None  # No album found

    # Assuming the first search result is the desired album
    album_id = albums[0]['id']
    tracks = sp.album_tracks(album_id)

    # Extract track names
    tracklist = [track['name'] for track in tracks['items']]
    return tracklist
    
 
        Does the chatbot use any database (local or external) or any external service? Answer with a list of these databases and services (only names on a single line, no further explanation, no numeration). 
        
    For this problem I received these answers, each with a list of services:
    Spotify API, Last FM API
Spotify API, Last FM API
Spotify API, Last FM API
Spotify API, Last FM API,,###
Spotify API, Last FM API
Spotify API, Last FM API
Spotify API, Last FM API
Spotify API, Last FM API
Spotify API, Last FM API
Spotify API, Last FM API
    Basing on these answers and on the action file written in the problem, write one complete and correct list of the external services used in this action file. Keep in mind that some answers may have incorrect terms which are not external services or databases (like libraries that are not external services, or services that do not exist) and you have to remove them. 
    Different answers may refer to the same service with different names, and there could be missing services that you have to add.
    Write this list of service names on a single line, with no introduction, further explanation or numeration, so like this:
    Service1, Service2, Service3 
    In a new section titled "Purpose of external services" explain the purpose of each service.
    If the file doesn't use any external service nor database, answer only with "NO" and nothing else

RESPONSE
Spotify API, Last FM API

Purpose of external services:
- Spotify API: Used to search for albums, retrieve album details including release dates, and get tracklists of albums.
- Last FM API: Used to fetch artist biographies.