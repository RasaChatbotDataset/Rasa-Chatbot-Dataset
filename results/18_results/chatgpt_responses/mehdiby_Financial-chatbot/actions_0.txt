REQUEST
Problem: This is a python actions.py file of Rasa chatbot from typing import Any, Text, Dict, List
from rasa_sdk import Action, Tracker
from rasa_sdk.events import SlotSet
from rasa_sdk.executor import CollectingDispatcher
from bs4 import BeautifulSoup
import requests
import time 

def get_price_coin(coin):
    url="https://www.google.com/search?q="+coin+"+price&hl=en"
    HTML= requests.get(url)
    soup=BeautifulSoup(HTML.text,"html.parser")
    text=soup.find('div', attrs={'class':'BNeawe iBp4i AP7Wnd'}).find('div', attrs={'class':'BNeawe iBp4i AP7Wnd'}).text
    return text
def get_price_stock(stock):
    url="https://www.google.com/finance/quote/"+stock
    HTML= requests.get(url)
    soup=BeautifulSoup(HTML.text,"html.parser")
    count=0
    return soup.find_all('div', attrs={'class':'YMlKec'})[10].text   


class ActionGiveCoinPrice(Action):

    def name(self) -> Text:
        return "action_give_coin_price"

    def run(self, dispatcher: CollectingDispatcher,
            tracker: Tracker,
            domain: Dict[Text, Any]) -> List[Dict[Text, Any]]:
        current_coin = next(tracker.get_latest_entity_values("coin"), None)
        
        if not current_coin:
            msg = "the tunisian dinar is stable. you can give me another currency and see how much is it worth in TND"
            dispatcher.utter_message(text=msg)
            return []
        
       
                
        msg = f"One {current_coin} is now worth {get_price_coin(current_coin)} ."
        dispatcher.utter_message(text=msg)
        
        return []


class ActionGiveStockPrice(Action):

    def name(self) -> Text:
        return "action_give_stock_price"

    def run(self, dispatcher: CollectingDispatcher,
            tracker: Tracker,
            domain: Dict[Text, Any]) -> List[Dict[Text, Any]]:
        current_stock = next(tracker.get_latest_entity_values("stock"), None)
        
        if not current_stock:
            msg = "i can t seem to recognize the stock you are asking about. would you please rephrase"
            dispatcher.utter_message(text=msg)
            return []
        
       
                
        msg = f"The {current_stock} stock price is now  {get_price_stock(current_stock)} ."
        dispatcher.utter_message(text=msg)
        
        return []
 
        Does the chatbot use any database (local or external) or any external service? Answer with a list of these databases and services (only names on a single line, no further explanation, no numeration). 
        
    For this problem I received these answers, each with a list of services:
    Google, BeautifulSoup, requests
Google, BeautifulSoup, requests
Google, BeautifulSoup, requests
Google Search, Google Finance
Google Search, Google Finance
Google Search, Google Finance
Google Search, Google Finance
Google, BeautifulSoup, requests
Google Search, Google Finance
Google Search, Google Finance
    Basing on these answers and on the action file written in the problem, write one complete and correct list of the external services used in this action file. Keep in mind that some answers may have incorrect terms which are not external services or databases (like libraries that are not external services, or services that do not exist) and you have to remove them. 
    Different answers may refer to the same service with different names, and there could be missing services that you have to add.
    Write this list of service names on a single line, with no introduction, further explanation or numeration, so like this:
    Service1, Service2, Service3 
    In a new section titled "Purpose of external services" explain the purpose of each service.
    If the file doesn't use any external service nor database, answer only with "NO" and nothing else

RESPONSE
Google Search, Google Finance

Purpose of external services:
Google Search: Used to retrieve the current price of a cryptocurrency by performing a search query.
Google Finance: Used to retrieve the current price of a stock by accessing the Google Finance page for the specific stock.